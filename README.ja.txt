TTEnglishInputHelper
====================

概要
----

当プラグインは、
The CMU Pronouncing Dictionary
http://www.speech.cs.cmu.edu/cgi-bin/cmudict
で、単語毎に引いた発音記号(Arpabet)の列を1つに連結して、
列の先頭から、あらかじめ作っておいたArpabet→oto.ini音名変換表で、
最長一致法の様な形で変換していく物です。


ツール構成
----------

　　　┌───┐┏━━━━━┓
凡例：│データ│┃プログラム┃
　　　└───┘┗━━━━━┛

┌────┐┌──────────┐
│oto.ini ││音素→Arpabet対応表 │
└──┬─┘└────┬─────┘
　　　↓　　　　　　　↓
 ┏━━━━━━━━━━━━━━━┓
 ┃Arpabet→音名変換表作成ツール ┃
 ┗━━━━━━━┯━━━━━━━┛
 +----------------------------+
 | 　　　　　　　↓　　　　　 |┌─────────────┐
 |　┌───────────┐|│ユーザー入力の英語テキスト│
 |　│Arpabet→音名変換表 ※│|└──┬──────────┘
 |　└────────┬──┘+---------------+
 |　　　　　　　　　　↓　　　 　　　↓　　　 |
 |　┌────┐　┏━━━━━━━━━━━┓　|┌─────────┐
 |　│CMUdict ├→┃英語入力補助プラグイン┃←|┤プラグイン入力ust │
 |　└────┘　┗━━━━━┯━━━━━┛　|└─────────┘
 +----+---------------------------------------+
　　　| 　　　　　　　　　　　↓
　　　V 　　　　　　┌─────────┐
UTAUプラグイン　　　│プラグイン出力ust │
として配布する　　　└─────────┘
　　部分

※「Arpabet→音名変換表」ファイルは事前に生成しておいて、
　「英語入力補助プラグイン」に含めて配布することを想定しています。


ファイル構成
------------

これは、プラグインの開発用のフォルダを
まとめた物です。

トップは、以下の3つのフォルダになっています。
* TTEIHConfig_dev
  これは、Arpabet→oto.ini音名変換表作成ツールです。
* TTEnglishInputHelper_dev
  これは、英語入力補助プラグインです。
* xulrunner
  これは、XULRunnerという実行環境です。

以下が、実行するファイルになります。

* TTEIHConfig_dev\eihconfig.js
  変換表作成ツールをこの開発用フォルダ構成で実行する為のファイルです。
* TTEIHConfig_dev\TTEIHConfig\eihconfig.js
  変換表作成ツールがUTAUプラグインとして起動される際に実行される
  ファイルです。
* TTEnglishInputHelper_dev\eih.js
  英語入力補助プラグインをこの開発用フォルダ構成で実行する為の
  ファイルです。
* TTEnglishInputHelper_dev\TTEnglishInputHelpereih.js
  英語入力補助プラグインがUTAUから起動される際に実行されるファイル
  です。

以下が、変換表作成ツールで使用する音素→Arpabet変換表です。

* TTEIHConfig_dev\data\MinaraiMona_to_arpabet.tsv
  MinaraiMonaで使われている表記方法からArpabetへの変換表です。
* TTEIHConfig_dev\data\x-sampa_to_arpabet.tsv
  X=SAMPAからArpabetへの変換表です。

以下が、英語入力補助プラグインで使用しているデータです。
いずれも、
TTEnglishInputHelper_dev\TTEnglishInputHelper\eih\chrome\content\data
の配下になります。

* config.json
  英語入力補助プラグイン設定ファイル。各データファイルの文字コード等の
  情報と、変換表(voicemap)のリストです。ここに登録されたファイルや
  変換表だけが処理対象になります。
* cmudict\cmudict.0.7a
  英単語→発音記号の辞書本体です。他のファイルは今のところ
  使っていないと思います。
* voicemap\*.tsv
  Arpabet→音名変換表です。拡張子の通り、タブ区切りです。


音素→Arpabet対応表ファイル形式
-------------------------------

タブ区切りです。改行コードはLF,CR,CR+LFのいずれでも良いはずです。

(例)
breath	-1	*invalid*
tth	10	DH
&	5	AH
@	10	AE
U	5	Y	UW
~	0	*ignore*

* 1列目は、音素の名前。oto.iniの音名に使われている発音記号
* 2列目は、ウェイト。
  0未満は、無効。変換対象外の物として扱う。出力ではコメントアウト。
  0は、無視。無効にはしないが、変換処理には影響を与えない。
* 3列目以降（複数も可能）は、対応するArpabet。
  ウェイトが0以下の場合は、無視される。


Arpabet→音名対応表ファイル形式
-------------------------------

タブ区切りです。改行コードはLF,CR,CR+LFのいずれでも良いはずです。
行の順番が優先順位です。先頭行が最も優先順位が高く、最後の行が最も
優先順位が低いという形になります。

(例)
# breath
^/Y UW/	-U
AE//$	@-
/AE/$	@-
AH/NG K S T/	&ngkst
/AH NG K S T/	&ngkst

行の先頭が、"#"の行は、コメント行で無視されます。

* 1列目が、Arpabetのパターンです。この中は、さらに"/"で
  分かれますが、それについては、次の節に記述します。
* 2列目以降(複数可能)が、1列目のパターンにマッチした場合に出力する
  音名です。複数あったら、その並びが出力されるはずです。


Arpabet→音名対応表パターン
-------------------------------

パターンは、次のようになっています。
<後方条件> / <パターン本体> / <前方条件>

パターンのマッチングは、Arpabet列中の現在位置に<パターン本体>の先頭を
合わせて比較します。パターンがマッチしたら、<パターン本体>の長さの
分だけ現在位置を進めます。
まず、現在位置より後ろの部分が<後方条件>とマッチしているか確認します。
次に、現在位置から前方が<パターン本体>とマッチしているか確認します。
最後に、現在位置から<パターン本体>の長さ分だけ進めた前方からが
<前方条件>とマッチしているか確認します。

<後方条件>と<前方条件>には、特別な記号が書けます。
<後方条件>に"^"が書かれている場合、Arpabet列の先頭にマッチします。
<前方条件>に"$"が書かれている場合、Arpabet列の最後尾にマッチします。


開発環境
--------

開発に使用しているのは、JavaScript、HTML、CSSで、変換表作成ツール、
英語入力補助プラグインともに、XULRunnerアプリケーションとして
構成しています。

しかし、本体の実行環境は、Windows Script Host(WSH)ではありませんが、
UTAUからプラグインとして起動するために、最初に実行するプログラムは、
WSH用のJavaScriptです（その中でXULRunnerを起動しています）。
当初は、C言語でCreateProcessするだけのプログラムを用意していましたが、
Avast!でウィルスとして駆除されてしまうため、WSHを使うように
変更しました。
PowerShellは、通常のコマンドとしては実行時にコンソールウィンドウを
表示しない方法が無いようだったため、採用しませんでした。


不具合
------

* 現時点では、MinaraiMona用の変換表では動作していますが、
  デルタ式eng v4とv5では、無限ループの様になっているのか、
  変換ボタンクリック後、応答しなくなってしまいます。
  この点については、現在調査中です。
* presamp等、UTAU標準以外のレンダリングエンジンとの相性は未確認です。


今後の目標
----------

* NAL、小春音アミ、波音リツ、歌音山将、Czリスト系など、できるだけ
  多くの音源に対応したい（対応しきれなさそう…）。
* ustファイルから、現在の音源名を取得して、そこから、正規表現で
  マッチングして対応する変換表を自動で選択する（対応しきれないと
  思うが…）。
* CMUdictに複数候補があった時に切り替えられるようにする。
* より、入力効率を良くする（テキスト入力画面と返還後の表の画面という
  様に切り替えないようにするなど）
* 現時点では、区切り文字を全て無視している（つまり、1回分の入力全体を
  1つの文とみなしている感じになると考えている）が、それでよいのか。
* 数字→数詞変換（確か、現時点では数字は、無視している）
* 仮名→Arpabet変換（これよって、日本語の歌詞を英語用音声ライブラリー
  向けにUTAわせやすくする）
* テキスト中に音名を直接書いたり、Arpabet（できればX-SAMPAがよいか？）
  を直接いたりできるようにしたい。
* 現在は、Arpabet中心になっているが、Arpabet→X-SAMPAのフェーズを
  挟むようにして汎用性(他の言語への対応可能性)を高める？
* Wiktionaryのデータから、単語と発音記号の対応が抽出できたら、他の
  言語にも対応できる？（ライセンスは…？）

